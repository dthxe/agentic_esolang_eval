# HumanEval/158: Find word with maximum unique characters
(find_max words) = 
  (find_max_helper words (nil) (z));

(find_max_helper (nil) best_word _) = best_word;
(find_max_helper (cons word rest) best_word best_count) = 
  (let [curr_count (count_unique word)]
    (if (gt curr_count best_count)
        (find_max_helper rest word curr_count)
        (if (and (eq curr_count best_count)
                 (lexically_smaller word best_word))
            (find_max_helper rest word curr_count)
            (find_max_helper rest best_word best_count))));

(count_unique str) = 
  (length (unique str));

(unique (nil)) = (nil);
(unique (cons x xs)) = 
  (if (member x xs)
      (unique xs)
      (cons x (unique xs)));

(member _ (nil)) = (f);
(member x (cons y ys)) = 
  (if (byte_eq x y)
      (t)
      (member x ys));

(lexically_smaller (nil) (cons _ _)) = (t);
(lexically_smaller (cons _ _) (nil)) = (f);
(lexically_smaller (cons x xs) (cons y ys)) = 
  (if (byte_eq x y)
      (lexically_smaller xs ys)
      (lt x y));

(length (nil)) = (z);
(length (cons _ xs)) = (s (length xs));

(gt x y) = (lt y x);

# Test case: ["abc", "ab", "abcd"] -> "abcd"
(main) = (find_max 
          (cons 
            (cons (byte (6) (1))  # 'a'
            (cons (byte (6) (2))  # 'b'
            (cons (byte (6) (3))  # 'c'
            (nil))))
            (cons
              (cons (byte (6) (1))  # 'a'
              (cons (byte (6) (2))  # 'b'
              (nil)))
              (cons
                (cons (byte (6) (1))  # 'a'
                (cons (byte (6) (2))  # 'b'
                (cons (byte (6) (3))  # 'c'
                (cons (byte (6) (4))  # 'd'
                (nil)))))
                (nil)))));
