# HumanEval/38: Check if sentence is meaningful (3+ words, each 1+ chars)
(meaningful_words sentence) = 
  (let [words (split_words sentence)]
    (and (ge (length words) (s (s (s (z)))))  # At least 3 words
         (all_words_valid words)));

(split_words (nil)) = (nil);
(split_words str) = 
  (cons (take_word str) 
        (split_words (drop_word (drop_spaces str))));

(take_word (nil)) = (nil);
(take_word (cons x xs)) = 
  (if (byte_eq x (byte (2) (0)))  # space
      (nil)
      (cons x (take_word xs)));

(drop_word (nil)) = (nil);
(drop_word (cons x xs)) = 
  (if (byte_eq x (byte (2) (0)))  # space
      (cons x xs)
      (drop_word xs));

(drop_spaces (nil)) = (nil);
(drop_spaces (cons x xs)) = 
  (if (byte_eq x (byte (2) (0)))  # space
      (drop_spaces xs)
      (cons x xs));

(all_words_valid (nil)) = (t);
(all_words_valid (cons x xs)) = 
  (and (gt (length x) (z))  # Word length > 0
       (all_words_valid xs));

(length (nil)) = (z);
(length (cons _ xs)) = (s (length xs));

(ge x y) = (not (lt x y));
(gt x y) = (lt y x);

# Test case: 'Hello world here' -> true
(main) = (meaningful_words 
          (cons (byte (4) (8))  # 'H'
          (cons (byte (6) (5))  # 'e'
          (cons (byte (6) (C))  # 'l'
          (cons (byte (6) (C))  # 'l'
          (cons (byte (6) (F))  # 'o'
          (cons (byte (2) (0))  # ' '
          (cons (byte (7) (7))  # 'w'
          (cons (byte (6) (F))  # 'o'
          (cons (byte (7) (2))  # 'r'
          (cons (byte (6) (C))  # 'l'
          (cons (byte (6) (4))  # 'd'
          (cons (byte (2) (0))  # ' '
          (cons (byte (6) (8))  # 'h'
          (cons (byte (6) (5))  # 'e'
          (cons (byte (7) (2))  # 'r'
          (cons (byte (6) (5))  # 'e'
          (nil))))))))))))))));
