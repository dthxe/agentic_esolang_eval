# Repeat string n times
# Helper functions for Church numerals and arithmetic
(sub (s x) (z)) = (s x);
(sub (s x) (s y)) = (sub x y);

# Convert string digit to Church numeral
(digit_to_church (3) (x)) = (digit_to_church_helper x);
(digit_to_church_helper (0)) = (z);
(digit_to_church_helper (1)) = (s (z));
(digit_to_church_helper (2)) = (s (s (z)));
(digit_to_church_helper (3)) = (s (s (s (z))));
(digit_to_church_helper (4)) = (s (s (s (s (z)))));
(digit_to_church_helper (5)) = (s (s (s (s (s (z))))));
(digit_to_church_helper (6)) = (s (s (s (s (s (s (z)))))));
(digit_to_church_helper (7)) = (s (s (s (s (s (s (s (z))))))));
(digit_to_church_helper (8)) = (s (s (s (s (s (s (s (s (z)))))))));
(digit_to_church_helper (9)) = (s (s (s (s (s (s (s (s (s (z))))))))));

# Read input string into a list until newline
(read_string) = (read_char (input_byte));
(read_char (0) (A)) = (nil);  # Stop at newline;
(read_char x) = (cons x (read_string));

# Repeat string n times
(repeat str (z)) = (nil);  # Zero times;
(repeat str (s n)) = (append str (repeat str n));  # n+1 times;

# Main function
(main) = (print;
          (append 
            (repeat 
              (read_string)  # Input string
              (digit_to_church (input_byte) (input_byte))  # Number of times
            )
            (cons (byte (0) (A)) (nil))  # Add final newline
          )
        );

# Helper functions for printing and list manipulation
(print (cons x y)) = (then (output x) (print y));
(then a b) = b;
(append (cons x xs) ys) = (cons x (append xs ys));
(append (nil) ys) = ys;
