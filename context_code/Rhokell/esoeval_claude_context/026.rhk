# Check if two strings are anagrams
# Helper functions for Church numerals
(sub (z) y) = (z);
(sub (s x) (z)) = (s x);
(sub (s x) (s y)) = (sub x y);

# Print True or False
(print_true) = (print (cons (byte (5) (4)) # T;
                     (cons (byte (7) (2)) # r
                     (cons (byte (7) (5)) # u
                     (cons (byte (6) (5)) # e
                     (cons (byte (0) (A)) # \n
                           (nil)))))));

(print_false) = (print (cons (byte (4) (6)) # F;
                      (cons (byte (6) (1)) # a
                      (cons (byte (6) (C)) # l
                      (cons (byte (7) (3)) # s
                      (cons (byte (6) (5)) # e
                      (cons (byte (0) (A)) # \n
                            (nil))))))));

# Read input string into a list until newline
(read_string) = (read_char (input_byte));
(read_char (0) (A)) = (nil);  # Stop at newline;
(read_char x) = (cons x (read_string));

# Sort characters in a list (bubble sort)
(sort (nil)) = (nil);
(sort (cons x xs)) = (sort_step (cons x xs) (nil));

(sort_step (cons x (nil)) acc) = (append acc (cons x (nil)));
(sort_step (cons x (cons y ys)) acc) = 
    (sort_next (sub x y) x y ys acc);

(sort_next (z) x y ys acc) = 
    (sort_step (cons y ys) (append acc (cons x (nil))));  # x <= y;
(sort_next (s n) x y ys acc) = 
    (sort_step (cons x ys) (append acc (cons y (nil))))  # x > y

# Compare two sorted lists for equality
(equal (nil) (nil)) = (s (z));  # True;
(equal (cons x xs) (cons y ys)) = (compare_bytes x y xs ys);
(equal x y) = (z);  # False;

(compare_bytes x y xs ys) = (compare_helper (byte_equal x y) xs ys);
(compare_helper (s n) xs ys) = (equal xs ys);
(compare_helper (z) xs ys) = (z);

(byte_equal x y) = (byte_equal_helper (sub x y) (sub y x));
(byte_equal_helper (z) (z)) = (s (z));
(byte_equal_helper x y) = (z);

# Check if strings are anagrams
(is_anagram str1 str2) = (check_anagram (equal (sort str1) (sort str2)));
(check_anagram (s n)) = (print_true);
(check_anagram (z)) = (print_false);

# Main function
(main) = (is_anagram (read_string) (read_string));

# Helper functions for printing and list manipulation
(print (cons x y)) = (then (output x) (print y));
(then a b) = b;
(append (cons x xs) ys) = (cons x (append xs ys));
(append (nil) ys) = ys;
