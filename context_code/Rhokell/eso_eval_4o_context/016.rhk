# Convert a number to binary
# Helper functions for Church numerals and arithmetic
(sub (z) y) = (z);
(sub (s x) (z)) = (s x);
(sub (s x) (s y)) = (sub x y);

# Convert string digit to Church numeral
(digit_to_church (3) (x)) = (digit_to_church_helper x);
(digit_to_church_helper (0)) = (z);
(digit_to_church_helper (1)) = (s (z));
(digit_to_church_helper (2)) = (s (s (z)));
(digit_to_church_helper (3)) = (s (s (s (z))));
(digit_to_church_helper (4)) = (s (s (s (s (z)))));
(digit_to_church_helper (5)) = (s (s (s (s (s (z))))));
(digit_to_church_helper (6)) = (s (s (s (s (s (s (z)))))));
(digit_to_church_helper (7)) = (s (s (s (s (s (s (s (z))))))));
(digit_to_church_helper (8)) = (s (s (s (s (s (s (s (s (z)))))))));
(digit_to_church_helper (9)) = (s (s (s (s (s (s (s (s (s (z))))))))));

# Convert n to binary
(to_binary (n)) = (binary_helper n (nil));
(binary_helper (z) acc) = acc;
(binary_helper n acc) = (binary_helper (div n (s (s (z)))) (cons (mod n (s (s (z)))) acc));

# Calculate division and remainder
(div a b) = (div_helper a b (z));
(div_helper a b acc) = (if (lt a b) acc (div_helper (sub a b) b (s acc)));

(mod a b) = (mod_helper a b);
(mod_helper a b) = (mod_next (sub a b) a b);
(mod_next (z) a b) = (z);  # b divides a
(mod_next (s x) a b) = (mod_step (sub a b) a b);
(mod_step (z) a b) = (z);  # b divides a
(mod_step (s x) a b) = (s (mod_helper (sub a b) b));

(lt (z) (s x)) = (s (z));
(lt (s x) (s y)) = (lt x y);
(lt x y) = (z);

# Main function
(main) = (print (to_binary (digit_to_church (input_byte) (input_byte))));

# Helper functions for printing and list manipulation
(print (cons x y)) = (then (output x) (print y));
(then a b) = b;
(append (cons x xs) ys) = (cons x (append xs ys));
(append (nil) ys) = ys;
