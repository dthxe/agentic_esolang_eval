# Fibonacci sequence up to n
# Helper functions for Church numerals and arithmetic
(add (z) y) = (y);
(add (s x) y) = (s (add x y));

# Convert string digit to Church numeral
(digit_to_church (3) (x)) = (digit_to_church_helper x);
(digit_to_church_helper (0)) = (z);
(digit_to_church_helper (1)) = (s (z));
(digit_to_church_helper (2)) = (s (s (z)));
(digit_to_church_helper (3)) = (s (s (s (z))));
(digit_to_church_helper (4)) = (s (s (s (s (z)))));
(digit_to_church_helper (5)) = (s (s (s (s (s (z))))));
(digit_to_church_helper (6)) = (s (s (s (s (s (s (z)))))));
(digit_to_church_helper (7)) = (s (s (s (s (s (s (s (z))))))));
(digit_to_church_helper (8)) = (s (s (s (s (s (s (s (s (z)))))))));
(digit_to_church_helper (9)) = (s (s (s (s (s (s (s (s (s (z))))))))));

# Calculate Fibonacci sequence
(fib (z)) = (cons (z) (nil));
(fib (s (z))) = (cons (z) (cons (s (z)) (nil)));
(fib (s (s x))) = (append (fib (s x)) (cons (add (fib x) (fib (s x))) (nil)));

# Main function
(main) = (print (fib (digit_to_church (input_byte) (input_byte))));

# Helper functions for printing and list manipulation
(print (cons x y)) = (then (output x) (print y));
(then a b) = b;
(append (cons x xs) ys) = (cons x (append xs ys));
(append (nil) ys) = ys;
